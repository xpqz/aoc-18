"""
Tests for the CircularList class
"""
import pytest   # type: ignore

from day9 import CircularList, Node

TEST_DATA = [
    ([0, 1], [0, 2, 1], 1, 2),
    ([0, 2, 1], [0, 2, 1, 3], 1, 3),
    ([0, 2, 1, 3], [0, 4, 2, 1, 3], 3, 4),
    ([0, 4, 2, 1, 3], [0, 4, 2, 5, 1, 3], 1, 5),
    ([0, 4, 2, 5, 1, 3], [0, 4, 2, 5, 1, 6, 3], 3, 6),
    ([0, 4, 2, 5, 1, 6, 3], [0, 4, 2, 5, 1, 6, 3, 7], 5, 7),
    ([0, 4, 2, 5, 1, 6, 3, 7], [0, 8, 4, 2, 5, 1, 6, 3, 7], 7, 8),
    ([0, 8, 4, 2, 5, 1, 6, 3, 7], [0, 8, 4, 9, 2, 5, 1, 6, 3, 7], 1, 9),
    ([0, 8, 4, 9, 2, 5, 1, 6, 3, 7], [0, 8, 4, 9, 2, 10, 5, 1, 6, 3, 7], 3, 10),
    ([0, 8, 4, 9, 2, 10, 5, 1, 6, 3, 7], [
        0, 8, 4, 9, 2, 10, 5, 11, 1, 6, 3, 7], 5, 11),
    ([0, 8, 4, 9, 2, 10, 5, 11, 1, 6, 3, 7], [
        0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 3, 7], 7, 12),
    ([0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 3, 7], [
        0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 7], 9, 13),
    ([0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 7], [
        0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7], 11, 14),
    ([0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7], [
        0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], 13, 15),
    ([0, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], [
        0, 16, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], 15, 16),
    ([0, 16, 8, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], [
        0, 16, 8, 17, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], 1, 17),
    ([0, 16, 8, 17, 4, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], [
        0, 16, 8, 17, 4, 18, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], 3, 18),
    ([0, 16, 8, 17, 4, 18, 9, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], [
        0, 16, 8, 17, 4, 18, 9, 19, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], 5, 19),
    ([0, 16, 8, 17, 4, 18, 9, 19, 2, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], [
        0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], 7, 20),
    ([0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], [
        0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 21, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], 9, 21),
    ([0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 21, 5, 11, 1, 12, 6, 13, 3, 14, 7, 15], [
        0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 21, 5, 22, 11, 1, 12, 6, 13, 3, 14, 7, 15], 11, 22),
    ([0, 16, 8, 17, 4, 18, 9, 19, 2, 20, 10, 21, 5, 22, 11, 1, 12, 6, 13, 3, 14, 7, 15], [
        0, 16, 8, 17, 4, 18, 19, 2, 20, 10, 21, 5, 22, 11, 1, 12, 6, 13, 3, 14, 7, 15], 13, 23)
]


def to_list(clist):
    tmp = clist.cursor
    while not tmp.start:
        tmp = tmp.right

    items = [tmp.item]
    tmp = tmp.right
    while not tmp.start:
        items.append(tmp.item)
        tmp = tmp.right

    return items


def seed(clist, items, cursor_index):
    nodes = [Node(i) for i in items]

    for index, node in enumerate(nodes):
        if index == 0:
            node.start = True
            node.left = nodes[-1]

        try:
            node.right = nodes[index + 1]
            nodes[index + 1].left = node
        except IndexError:
            node.right = nodes[0]

    clist.cursor = nodes[cursor_index]


@pytest.mark.parametrize(
    "data,expected,cursor_index,value",
    TEST_DATA
)
def test_circular_list_sample_data(
        data,
        expected,
        cursor_index,
        value
):
    """
    Test that CircularList works correctly using the small sample data set.
    """
    circle = CircularList()

    seed(circle, data, cursor_index)
    circle.place(1, value)
    items = to_list(circle)

    assert items == expected
